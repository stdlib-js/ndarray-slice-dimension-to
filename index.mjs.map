{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport base from '@stdlib/ndarray-base-slice-dimension-to';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only truncated view of an input ndarray along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {integer} stop - ending index (exclusive)\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be an integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var y = sliceDimensionTo( x, 0, 2 );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 2, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ]\n*/\nfunction sliceDimensionTo( x, dim, stop ) {\n\tvar options;\n\tvar opts;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tif ( !isInteger( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an integer. Value: `%s`.', stop ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\toptions = arguments[ 3 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t}\n\treturn base( x, dim, stop, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimensionTo;\n"],"names":["sliceDimensionTo","x","dim","stop","options","opts","strict","isndarrayLike","TypeError","format","isInteger","arguments","length","isPlainObject","hasOwnProp","isBoolean","base"],"mappings":";;4rBA6EA,SAASA,EAAkBC,EAAGC,EAAKC,GAClC,IAAIC,EACAC,EAKJ,GAHAA,EAAO,CACNC,QAAU,IAELC,EAAeN,GACpB,MAAM,IAAIO,UAAWC,EAAQ,oEAAqER,IAEnG,IAAMS,EAAWR,GAChB,MAAM,IAAIM,UAAWC,EAAQ,qEAAsEP,IAEpG,IAAMQ,EAAWP,GAChB,MAAM,IAAIK,UAAWC,EAAQ,oEAAqEN,IAEnG,GAAKQ,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNT,EAAUO,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,qEAAsEL,IAEpG,GAAKU,EAAYV,EAAS,UAAa,CACtC,IAAMW,EAAWX,EAAQE,QACxB,MAAM,IAAIE,UAAWC,EAAQ,+DAAgE,SAAUL,EAAQE,SAEhHD,EAAKC,OAASF,EAAQE,MACtB,CACD,CACD,OAAOU,EAAMf,EAAGC,EAAKC,EAAME,EAAKC,QAAQ,EACzC"}